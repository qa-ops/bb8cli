#!/usr/bin/env bash
load_conf list
load_conf install_options

function _show_all() {
  in_cyan "\nList of all repository:"
  printf "%-20s %s\n" "ALIAS" "URL"
  printf "\n"
  for name in "${!list[@]}"; do
    printf "%-20s %s\n" "${name}" "${list[${name}]}"
  done | sort
}

# vim: ft=sh
SUBCOMMAND_DESC="Provides interactions with QAOps projects"
SUBCOMMAND_HELP=$(cat <<EOH

show                      List all repos
open <ALIAS>              Open the repository in the browser
ALIAS                     The same as "open <ALIAS>"
download <ALIAS>          Will download repo of the choosen ALIAS to the parent folder of this CLI
                            If <ALIAS> not given, all repositories will be downloaded
install [libs | sws]      Install either libraries or software necessary for working with all QaOps projects
                            - libs -> install all libraries
                            - sws -> install all softwares

$(_show_all)

EOH
)

REPOS_LIBRARIES="${RESOURCES_DIR}/dependencies/repos-libraries"
REPOS_SOFTWARES="${RESOURCES_DIR}/dependencies/repos-softwares"

function download_repo() {
  local repo="${1}"
  in_cyan "Cloning repo: ${repo} to ${PROJECTS_DIR}"

  repo_name="${list[${repo}]##*/}"
  log "The repo name found is: ${repo_name}"

  [[ -z "${GIT_SSH_PROTOCOL}" ]] && error "user config not found. \nPlease execute 'bb setup check'"

  if [[ "${GIT_SSH_PROTOCOL}" == "true" ]]; then
    log "Cloning ${repo_name} using SSH"
    git clone "git@github.com:qa-ops/${repo_name}.git" "${PROJECTS_DIR}/${repo_name}"
  else
    log "Cloning ${repo_name} using HTTPS"
    git clone "${list[${repo}]}" "${PROJECTS_DIR}/${repo_name}"
  fi
}

function download_all_repo() {
  in_cyan "You are about to download ${#list[@]} repositories. Are you sure? (y/n)"
  read -r response

  if [[ "${response}" != "y" ]]; then
    in_yellow "Download cancelled"
    exit 0
  fi

  in_cyan "Downloading all repos"

  for repo in "${!list[@]}"; do
    download_repo "${repo}"
    echo -e "\n"
  done
}

function install_libraries() {
  in_cyan "Installing all libraries necessary to run all projects"

  IFS=$'\n' read -d '' -r -a libraries < "${REPOS_LIBRARIES}"

  for lib in "${libraries[@]}"; do
    brew install "${lib}"
  done
}

function install_softwares() {
  in_cyan "Installing all softwares necessary to run all projects"

  IFS=$'\n' read -d '' -r -a softwares < "${REPOS_SOFTWARES}"

  for sw in "${softwares[@]}"; do
    brew install "${sw}"
  done
}

#Different actions based on arguments
case ${1} in
  show)
    _show_all
  ;;
  open)
    alias="${2}"
    log "Alias given ${alias}"
    [[ -n "${list[${alias}]}" ]] && open_file "${list[${alias}]}" || _show_all
  ;;
  download)
    repo="${2}"
    log "Repo given: ${repo}"

    if [[ -n "${repo}" ]]; then
      download_repo "${repo}"
    else
      download_all_repo
    fi
  ;;
  install)
    choice="${2}"

    log "Choice given: ${choice}"

    if [[ "${choice}" == "libs" ]]; then
      install_libraries
    elif [[ "${choice}" == "sws" ]]; then
      install_softwares
    else
      in_yellow "Please give a valid option"
    fi
  ;;
  install-v2)
      choice="${2}"

      log "Choice given: ${choice}"

      if [[ ! ${install_options["${choice}"]} ]]; then
        in_yellow "Please give a valid option"
        exit 0
      fi

      eval "${install_options[${choice}]}"
    ;;
  *)
    alias="${1}"
    [[ -z "${alias}" ]] && return

    log "Alias given ${alias}"
    [[ -n "${list[${alias}]}" ]] && open_file "${list[${alias}]}" || _show_all
  ;;
esac

